{
  "hash": "6599116c8b7aac4d93dbcde9c4698c30",
  "result": {
    "markdown": "---\ntitle: \"Challenge 2\"\nauthor: \"Dominik Haller\"\n---\n\n::: {.cell hash='Challenge2_cache/html/unnamed-chunk-1_bd367fe8756ade1f9fd459519992c394'}\n\n```{.r .cell-code}\n# Standard\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attache Paket: 'recipes'\n#> \n#> Das folgende Objekt ist maskiert 'package:stringr':\n#> \n#>     fixed\n#> \n#> Das folgende Objekt ist maskiert 'package:stats':\n#> \n#>     step\n```\n:::\n\n```{.r .cell-code}\nlibrary(rsample)\nlibrary(workflows)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attache Paket: 'yardstick'\n#> \n#> Das folgende Objekt ist maskiert 'package:readr':\n#> \n#>     spec\n```\n:::\n\n```{.r .cell-code}\n# Plotting Decision Trees\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Lade nötiges Paket: rpart\n```\n:::\n\n```{.r .cell-code}\nbike_orderlines <- read_rds(\"bike_orderlines.rds\")\n#Prepare Data\ndata <- bike_orderlines %>% \n  #Select needed Columns\n  select(model, model_year, category_1, category_2, category_3, price, frame_material) %>% \n  #Remove Duplicates and prepare rows\n  distinct() %>% \n  na.omit() %>% \n  mutate_if(is.character, as.factor)\n\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 230\n#> Columns: 7\n#> $ model          <fct> Spectral CF 7 WMN, Ultimate CF SLX Disc 8.0 ETAP, Neuro…\n#> $ model_year     <dbl> 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#> $ category_1     <fct> Mountain, Road, Mountain, Road, Mountain, Hybrid / City…\n#> $ category_2     <fct> Trail, Race, Trail, Triathlon Bike, Dirt Jump, City, Tr…\n#> $ category_3     <fct> Spectral, Ultimate, Neuron, Speedmax, Stitched, Roadlit…\n#> $ price          <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ frame_material <fct> carbon, carbon, carbon, carbon, aluminium, carbon, carb…\n```\n:::\n\n```{.r .cell-code}\n#Split Data\nset.seed(123)\n\ndata_split <- initial_split(data, prop = 3/4)\n\ntrain_data <- training(data_split)\ntest_data <- testing(data_split)\n\n#Create recipe\nbikes_rec <- recipe(price ~ ., data = train_data) %>% \n  #Add roles\n  update_role(model, new_role = \"ID\") %>% \n  #Add dummy variables\n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors())\n\n#Create Model\nlr_mod <-\n  linear_reg() %>% \n  set_engine(\"glm\") \n  \n#Create Workflow\nbikes_wflow <- workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(bikes_rec)\nbikes_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: linear_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Linear Regression Model Specification (regression)\n#> \n#> Computational engine: glm\n```\n:::\n\n```{.r .cell-code}\n#Fit Model\nbikes_fit <- bikes_wflow %>% \n  fit(data = train_data)\n\n#Predict\nbikes_pred <- predict(bikes_fit, test_data) %>% \n  bind_cols(test_data %>% select(price, model))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#> Vorhersage durch Fit ohne vollen Rang mag täuschen\n```\n:::\n\n```{.r .cell-code}\nbikes_pred %>% \n  metrics(truth = price, estimate = .pred) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"rmse\",\"2\":\"standard\",\"3\":\"1.970556e+03\"},{\"1\":\"rsq\",\"2\":\"standard\",\"3\":\"6.245344e-02\"},{\"1\":\"mae\",\"2\":\"standard\",\"3\":\"1.442931e+03\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}