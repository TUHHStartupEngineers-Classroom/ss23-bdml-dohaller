[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Challenge 1",
    "section": "",
    "text": "library(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.1     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#&gt; Lade nötiges Paket: PerformanceAnalytics\n#&gt; Lade nötiges Paket: xts\n#&gt; Lade nötiges Paket: zoo\n#&gt; \n#&gt; Attache Paket: 'zoo'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     as.Date, as.Date.numeric\n#&gt; \n#&gt; \n#&gt; ######################### Warning from 'xts' package ##########################\n#&gt; #                                                                             #\n#&gt; # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#&gt; # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#&gt; # source() into this session won't work correctly.                            #\n#&gt; #                                                                             #\n#&gt; # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#&gt; # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#&gt; # dplyr from breaking base R's lag() function.                                #\n#&gt; #                                                                             #\n#&gt; # Code in packages is not affected. It's protected by R's namespace mechanism #\n#&gt; # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#&gt; #                                                                             #\n#&gt; ###############################################################################\n#&gt; \n#&gt; Attache Paket: 'xts'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:dplyr':\n#&gt; \n#&gt;     first, last\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'PerformanceAnalytics'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:graphics':\n#&gt; \n#&gt;     legend\n#&gt; \n#&gt; Lade nötiges Paket: quantmod\n#&gt; Lade nötiges Paket: TTR\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)\n\n# STOCK PRICES\nsp_500_prices_tbl &lt;- read_rds(\"sp_500_prices_tbl.rds\")\n\n# SECTOR INFORMATION\nsp_500_index_tbl &lt;- read_rds(\"sp_500_index_tbl.rds\")\n\n\n#Step 1\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n  select(symbol, date, adjusted) %&gt;% \n  filter(date &gt;= '2018-01-01') %&gt;% \n  group_by(symbol) %&gt;% \n  mutate(lag = lag(adjusted)) %&gt;% \n  na.omit %&gt;% \n  mutate(pct_return = (adjusted - lag)/lag) %&gt;% \n  select(symbol, date, pct_return)\n\n#Step 2\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n  spread(date, pct_return) %&gt;% \n  replace(is.na(.),0) %&gt;% \n  ungroup()\n\n#Step 3\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n  within(rm(\"symbol\")) %&gt;% \n  kmeans(centers = 4, nstart = 20)\n\n#Step 4\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\n\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;% \n  mutate(k_means = centers %&gt;%  map(kmeans_mapper)) %&gt;% \n  mutate(glance = k_means %&gt;% map(glance))\n  \nk_means_mapped_tbl %&gt;% \n  unnest(glance) %&gt;% \n  select(centers, tot.withinss) %&gt;% \n  # Visualization\n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#2DC6D6\", size = 4) +\n  geom_line(color = \"#2DC6D6\", size = 1) +\n  # Add labels (which are repelled a little)\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n  \n  # Formatting\n  labs(title = \"Skree Plot\")\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n#Step 5\numap_results &lt;- stock_date_matrix_tbl %&gt;% \n  select(-symbol) %&gt;% \n  umap()\n\numap_results_tbl &lt;- umap_results$layout %&gt;% \n  as_tibble(.name_repair = \"unique\") %&gt;% \n  set_names(c(\"x\", \"y\")) %&gt;%\n  bind_cols(stock_date_matrix_tbl %&gt;% select(symbol)) \n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\numap_results_tbl %&gt;% \n  ggplot(aes(x, y), ) +\n  geom_point(alpha = 0.5) + \n  theme_tq() + \n  ggrepel::geom_label_repel(aes(label = symbol), size = 3) + \n  labs(title = \"UMAP Projection\")\n\n#&gt; Warning: ggrepel: 501 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps\n\n\n\n\n\n\n\n#Step 6\numap_kmeans_results_tbl &lt;- kmeans_obj %&gt;% \n  augment(stock_date_matrix_tbl) %&gt;% \n  select(symbol, .cluster) %&gt;% \n  left_join(umap_results_tbl) %&gt;% \n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector))\n\n#&gt; Joining with `by = join_by(symbol)`\n#&gt; Joining with `by = join_by(symbol)`\n\numap_kmeans_results_tbl %&gt;% \n  ggplot(aes(x, y, color = .cluster)) +\n  \n  # Geometries\n  geom_point(alpha = 0.5) +\n  ggrepel::geom_label_repel(aes(label = symbol), size = 2, fill = \"#282A36\") +\n  \n  # Formatting\n  scale_color_manual(values=c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\", \"#2dd692\")) + \n  theme(legend.position = \"none\")\n\n#&gt; Warning: ggrepel: 496 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/Challenge1.html",
    "href": "content/01_journal/Challenge1.html",
    "title": "Challenge 1",
    "section": "",
    "text": "library(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.1     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#&gt; Lade nötiges Paket: PerformanceAnalytics\n#&gt; Lade nötiges Paket: xts\n#&gt; Lade nötiges Paket: zoo\n#&gt; \n#&gt; Attache Paket: 'zoo'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     as.Date, as.Date.numeric\n#&gt; \n#&gt; \n#&gt; ######################### Warning from 'xts' package ##########################\n#&gt; #                                                                             #\n#&gt; # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#&gt; # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#&gt; # source() into this session won't work correctly.                            #\n#&gt; #                                                                             #\n#&gt; # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#&gt; # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#&gt; # dplyr from breaking base R's lag() function.                                #\n#&gt; #                                                                             #\n#&gt; # Code in packages is not affected. It's protected by R's namespace mechanism #\n#&gt; # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#&gt; #                                                                             #\n#&gt; ###############################################################################\n#&gt; \n#&gt; Attache Paket: 'xts'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:dplyr':\n#&gt; \n#&gt;     first, last\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'PerformanceAnalytics'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:graphics':\n#&gt; \n#&gt;     legend\n#&gt; \n#&gt; Lade nötiges Paket: quantmod\n#&gt; Lade nötiges Paket: TTR\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)\n\n# STOCK PRICES\nsp_500_prices_tbl &lt;- read_rds(\"sp_500_prices_tbl.rds\")\n\n# SECTOR INFORMATION\nsp_500_index_tbl &lt;- read_rds(\"sp_500_index_tbl.rds\")\n\n\n#Step 1\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n  select(symbol, date, adjusted) %&gt;% \n  filter(date &gt;= '2018-01-01') %&gt;% \n  group_by(symbol) %&gt;% \n  mutate(lag = lag(adjusted)) %&gt;% \n  na.omit %&gt;% \n  mutate(pct_return = (adjusted - lag)/lag) %&gt;% \n  select(symbol, date, pct_return)\n\n#Step 2\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n  spread(date, pct_return) %&gt;% \n  replace(is.na(.),0) %&gt;% \n  ungroup()\n\n#Step 3\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n  within(rm(\"symbol\")) %&gt;% \n  kmeans(centers = 4, nstart = 20)\n\n#Step 4\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\n\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;% \n  mutate(k_means = centers %&gt;%  map(kmeans_mapper)) %&gt;% \n  mutate(glance = k_means %&gt;% map(glance))\n  \nk_means_mapped_tbl %&gt;% \n  unnest(glance) %&gt;% \n  select(centers, tot.withinss) %&gt;% \n  # Visualization\n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#2DC6D6\", size = 4) +\n  geom_line(color = \"#2DC6D6\", size = 1) +\n  # Add labels (which are repelled a little)\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n  \n  # Formatting\n  labs(title = \"Skree Plot\")\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n#Step 5\numap_results &lt;- stock_date_matrix_tbl %&gt;% \n  select(-symbol) %&gt;% \n  umap()\n\numap_results_tbl &lt;- umap_results$layout %&gt;% \n  as_tibble(.name_repair = \"unique\") %&gt;% \n  set_names(c(\"x\", \"y\")) %&gt;%\n  bind_cols(stock_date_matrix_tbl %&gt;% select(symbol)) \n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\numap_results_tbl %&gt;% \n  ggplot(aes(x, y), ) +\n  geom_point(alpha = 0.5) + \n  theme_tq() + \n  ggrepel::geom_label_repel(aes(label = symbol), size = 3) + \n  labs(title = \"UMAP Projection\")\n\n#&gt; Warning: ggrepel: 502 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps\n\n\n\n\n\n\n\n\n#Step 6\numap_kmeans_results_tbl &lt;- kmeans_obj %&gt;% \n  augment(stock_date_matrix_tbl) %&gt;% \n  select(symbol, .cluster) %&gt;% \n  left_join(umap_results_tbl) %&gt;% \n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector))\n\n#&gt; Joining with `by = join_by(symbol)`\n#&gt; Joining with `by = join_by(symbol)`\n\numap_kmeans_results_tbl %&gt;% \n  ggplot(aes(x, y, color = .cluster)) +\n  \n  # Geometries\n  geom_point(alpha = 0.5) +\n  ggrepel::geom_label_repel(aes(label = symbol), size = 2, fill = \"#282A36\") +\n  \n  # Formatting\n  scale_color_manual(values=c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\", \"#2dd692\")) + \n  theme(legend.position = \"none\")\n\n#&gt; Warning: ggrepel: 493 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps"
  },
  {
    "objectID": "content/01_journal/Challenge3.html",
    "href": "content/01_journal/Challenge3.html",
    "title": "Challenge 3",
    "section": "",
    "text": "require(tidyverse)\nrequire(GGally)\n#As I could not get plot_ggpairs to work I have used an alternate package GGally to plot pairs plots\n\nemployee_attrition_tbl &lt;- read_csv(\"~/GitHub/ss23-bdml-dohaller/code/dataset_employees.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "content/01_journal/Challenge3.html#monthly-income",
    "href": "content/01_journal/Challenge3.html#monthly-income",
    "title": "Challenge 3",
    "section": "1 Monthly Income",
    "text": "1 Monthly Income\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, MonthlyIncome) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nWe can deduce that those that are leaving are more likely to be the ones with lower income as seen in the upper right plot. Answer: C"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#compensation-features",
    "href": "content/01_journal/Challenge3.html#compensation-features",
    "title": "Challenge 3",
    "section": "2 Compensation Features",
    "text": "2 Compensation Features\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, PercentSalaryHike) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Answer: D"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#stock-options",
    "href": "content/01_journal/Challenge3.html#stock-options",
    "title": "Challenge 3",
    "section": "3 Stock Options",
    "text": "3 Stock Options\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, StockOptionLevel) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Answer: D"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#survey-results",
    "href": "content/01_journal/Challenge3.html#survey-results",
    "title": "Challenge 3",
    "section": "4 Survey Results",
    "text": "4 Survey Results\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, EnvironmentSatisfaction) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Although those with higher environment satisfaction may be more inclined to stay. Answer: A"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#work-life-balance",
    "href": "content/01_journal/Challenge3.html#work-life-balance",
    "title": "Challenge 3",
    "section": "5 Work Life Balance",
    "text": "5 Work Life Balance\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, WorkLifeBalance) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Answer: D"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#performance-data",
    "href": "content/01_journal/Challenge3.html#performance-data",
    "title": "Challenge 3",
    "section": "6 Performance Data",
    "text": "6 Performance Data\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, JobInvolvement) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Answer: D"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#overtime",
    "href": "content/01_journal/Challenge3.html#overtime",
    "title": "Challenge 3",
    "section": "7 Overtime",
    "text": "7 Overtime\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, OverTime) %&gt;% \n  ggpairs()\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Answer: D"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#training-and-education",
    "href": "content/01_journal/Challenge3.html#training-and-education",
    "title": "Challenge 3",
    "section": "8 Training and Education",
    "text": "8 Training and Education\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, TrainingTimesLastYear) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Answer: D"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#time-based-features",
    "href": "content/01_journal/Challenge3.html#time-based-features",
    "title": "Challenge 3",
    "section": "9 Time Based Features",
    "text": "9 Time Based Features\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, YearsAtCompany) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThose with less years tend to leave or rather those with more years tend to stay. Answer: B"
  },
  {
    "objectID": "content/01_journal/Challenge3.html#time-based-features-1",
    "href": "content/01_journal/Challenge3.html#time-based-features-1",
    "title": "Challenge 3",
    "section": "10 Time Based Features",
    "text": "10 Time Based Features\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition, YearsSinceLastPromotion) %&gt;% \n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIt is difficult to deduce anything from this plot. Answer: D"
  },
  {
    "objectID": "content/01_journal/Challenge4.html",
    "href": "content/01_journal/Challenge4.html",
    "title": "Challenge 4",
    "section": "",
    "text": "library(tidyverse)\nlibrary(h2o)\nlibrary(rsample)\nlibrary(recipes)\n\nlibrary(cowplot)\n\n#&gt; \n#&gt; Attache Paket: 'cowplot'\n\n\n#&gt; Das folgende Objekt ist maskiert 'package:lubridate':\n#&gt; \n#&gt;     stamp\n\nlibrary(glue)\n\n# Load Data\nproduct_backorders &lt;- read_csv(\"product_backorders.csv\")\n\n#&gt; Rows: 19053 Columns: 23\n\n\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#&gt; dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Split Data\nset.seed(123)\nsplit_obj &lt;- initial_split(product_backorders, prop = 0.85)\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl &lt;- testing(split_obj)\n\nproduct_rec &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  prep()\n\ntrain_data &lt;- bake(product_rec, new_data = train_readable_tbl)\ntest_data &lt;- bake(product_rec, new_data = test_readable_tbl)\n\n#Model\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         2 hours 31 minutes \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.1 \n#&gt;     H2O cluster version age:    3 months and 7 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Domin_adl455 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.91 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.2.3 (2023-03-15 ucrt)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_data), ratios = c(0.85), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_data)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o),y)\n\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n#&gt; 18:41:17.65: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 18:41:17.67: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |======================================================================| 100%\n\nautoml_models_h2o@leaderboard\n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1 StackedEnsemble_BestOfFamily_2_AutoML_7_20230515_184117 0.9504880 0.1643987\n#&gt; 2    StackedEnsemble_AllModels_1_AutoML_7_20230515_184117 0.9504311 0.1648459\n#&gt; 3    StackedEnsemble_AllModels_2_AutoML_7_20230515_184117 0.9502178 0.1650399\n#&gt; 4 StackedEnsemble_BestOfFamily_3_AutoML_7_20230515_184117 0.9498398 0.1648393\n#&gt; 5                          GBM_4_AutoML_7_20230515_184117 0.9457513 0.1693320\n#&gt; 6 StackedEnsemble_BestOfFamily_1_AutoML_7_20230515_184117 0.9446726 0.1726284\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7312994            0.1525371 0.2215139 0.04906843\n#&gt; 2 0.7322868            0.1819378 0.2225369 0.04952269\n#&gt; 3 0.7329884            0.1715856 0.2226509 0.04957343\n#&gt; 4 0.7322774            0.1486795 0.2217447 0.04917069\n#&gt; 5 0.7162660            0.1721743 0.2240319 0.05019029\n#&gt; 6 0.6980725            0.1840963 0.2278450 0.05191333\n#&gt; \n#&gt; [14 rows x 7 columns]\n\npredictions &lt;- h2o.predict(automl_models_h2o@leader, newdata = as.h2o((test_data)))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl &lt;- predictions %&gt;% \n  as_tibble()\npredictions_tbl\n\n\n\n  \n\n\nautoml_models_h2o@leader\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_BestOfFamily_2_AutoML_7_20230515_184117 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                     key            value\n#&gt; 1                     Stacking strategy cross_validation\n#&gt; 2  Number of base models (used / total)              2/3\n#&gt; 3      # GBM base models (used / total)              1/1\n#&gt; 4      # DRF base models (used / total)              1/1\n#&gt; 5      # GLM base models (used / total)              0/1\n#&gt; 6                 Metalearner algorithm              GLM\n#&gt; 7    Metalearner fold assignment scheme           Random\n#&gt; 8                    Metalearner nfolds                5\n#&gt; 9               Metalearner fold_column               NA\n#&gt; 10   Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.01987024\n#&gt; RMSE:  0.1409619\n#&gt; LogLoss:  0.08066434\n#&gt; Mean Per-Class Error:  0.05702448\n#&gt; AUC:  0.9941654\n#&gt; AUCPR:  0.9671903\n#&gt; Gini:  0.9883309\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     8778   93 0.010484    =93/8871\n#&gt; Yes     122 1056 0.103565   =122/1178\n#&gt; Totals 8900 1149 0.021395  =215/10049\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.447999    0.907606 168\n#&gt; 2                       max f2  0.310471    0.919124 206\n#&gt; 3                 max f0point5  0.639239    0.929372 125\n#&gt; 4                 max accuracy  0.447999    0.978605 168\n#&gt; 5                max precision  0.994716    1.000000   0\n#&gt; 6                   max recall  0.033231    1.000000 334\n#&gt; 7              max specificity  0.994716    1.000000   0\n#&gt; 8             max absolute_mcc  0.447999    0.895599 168\n#&gt; 9   max min_per_class_accuracy  0.263297    0.961800 221\n#&gt; 10 max mean_per_class_accuracy  0.251300    0.962303 225\n#&gt; 11                     max tns  0.994716 8871.000000   0\n#&gt; 12                     max fns  0.994716 1176.000000   0\n#&gt; 13                     max fps  0.000246 8871.000000 399\n#&gt; 14                     max tps  0.033231 1178.000000 334\n#&gt; 15                     max tnr  0.994716    1.000000   0\n#&gt; 16                     max fnr  0.994716    0.998302   0\n#&gt; 17                     max fpr  0.000246    1.000000 399\n#&gt; 18                     max tpr  0.033231    1.000000 334\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.04485142\n#&gt; RMSE:  0.2117815\n#&gt; LogLoss:  0.1558049\n#&gt; Mean Per-Class Error:  0.1357888\n#&gt; AUC:  0.9615669\n#&gt; AUCPR:  0.7991022\n#&gt; Gini:  0.9231338\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2023  68 0.032520   =68/2091\n#&gt; Yes      71 226 0.239057    =71/297\n#&gt; Totals 2094 294 0.058208  =139/2388\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.400399    0.764805 166\n#&gt; 2                       max f2  0.144189    0.812198 253\n#&gt; 3                 max f0point5  0.581369    0.783738 121\n#&gt; 4                 max accuracy  0.472020    0.942211 147\n#&gt; 5                max precision  0.991973    1.000000   0\n#&gt; 6                   max recall  0.000514    1.000000 398\n#&gt; 7              max specificity  0.991973    1.000000   0\n#&gt; 8             max absolute_mcc  0.400399    0.731605 166\n#&gt; 9   max min_per_class_accuracy  0.144189    0.904830 253\n#&gt; 10 max mean_per_class_accuracy  0.144189    0.905277 253\n#&gt; 11                     max tns  0.991973 2091.000000   0\n#&gt; 12                     max fns  0.991973  295.000000   0\n#&gt; 13                     max fps  0.000163 2091.000000 399\n#&gt; 14                     max tps  0.000514  297.000000 398\n#&gt; 15                     max tnr  0.991973    1.000000   0\n#&gt; 16                     max fnr  0.991973    0.993266   0\n#&gt; 17                     max fpr  0.000163    1.000000 399\n#&gt; 18                     max tpr  0.000514    1.000000 398\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05084448\n#&gt; RMSE:  0.2254872\n#&gt; LogLoss:  0.1717989\n#&gt; Mean Per-Class Error:  0.1418166\n#&gt; AUC:  0.9514432\n#&gt; AUCPR:  0.744858\n#&gt; Gini:  0.9028864\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;           No  Yes    Error         Rate\n#&gt; No     11463  685 0.056388   =685/12148\n#&gt; Yes      377 1282 0.227245    =377/1659\n#&gt; Totals 11840 1967 0.076918  =1062/13807\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold        value idx\n#&gt; 1                       max f1  0.293653     0.707115 216\n#&gt; 2                       max f2  0.118057     0.779576 286\n#&gt; 3                 max f0point5  0.610141     0.734463 119\n#&gt; 4                 max accuracy  0.548925     0.930760 138\n#&gt; 5                max precision  0.990492     1.000000   0\n#&gt; 6                   max recall  0.000270     1.000000 399\n#&gt; 7              max specificity  0.990492     1.000000   0\n#&gt; 8             max absolute_mcc  0.293653     0.666397 216\n#&gt; 9   max min_per_class_accuracy  0.124227     0.888294 283\n#&gt; 10 max mean_per_class_accuracy  0.118057     0.889717 286\n#&gt; 11                     max tns  0.990492 12148.000000   0\n#&gt; 12                     max fns  0.990492  1658.000000   0\n#&gt; 13                     max fps  0.000270 12148.000000 399\n#&gt; 14                     max tps  0.000270  1659.000000 399\n#&gt; 15                     max tnr  0.990492     1.000000   0\n#&gt; 16                     max fnr  0.990492     0.999397   0\n#&gt; 17                     max fpr  0.000270     1.000000 399\n#&gt; 18                     max tpr  0.000270     1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy    0.927688  0.005587   0.921369   0.928163   0.924936   0.936468\n#&gt; auc         0.951800  0.004378   0.945634   0.951499   0.951279   0.957928\n#&gt; err         0.072312  0.005587   0.078631   0.071837   0.075064   0.063532\n#&gt; err_count 199.600000 14.240787 216.000000 201.000000 205.000000 177.000000\n#&gt; f0point5    0.694135  0.024383   0.661447   0.699339   0.697088   0.728456\n#&gt;           cv_5_valid\n#&gt; accuracy    0.927505\n#&gt; auc         0.952661\n#&gt; err         0.072495\n#&gt; err_count 199.000000\n#&gt; f0point5    0.684343\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd  cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.681089  0.034281    0.641361   0.688347   0.689751\n#&gt; r2                  0.519631  0.027719    0.477718   0.521264   0.510876\n#&gt; recall              0.756120  0.041457    0.756173   0.747059   0.728070\n#&gt; residual_deviance 945.470640 48.748238 1001.057100 962.151370 975.520600\n#&gt; rmse                0.225272  0.007251    0.233101   0.226064   0.231477\n#&gt; specificity         0.951138  0.009321    0.943458   0.953214   0.953118\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.729814   0.656174\n#&gt; r2                  0.539954   0.548344\n#&gt; recall              0.723077   0.826219\n#&gt; residual_deviance 894.166700 894.457340\n#&gt; rmse                0.217729   0.217990\n#&gt; specificity         0.964649   0.941249\n\n#h2o.getModel(\"StackedEnsemble_AllModels_2_AutoML_5_20230510_181759\") %&gt;% \n # h2o.saveModel(path = \"/code/models/\")\n\n\n1 Leaderboard visualization (for Challenge 5)\n\ndata_transformed_tbl &lt;- automl_models_h2o@leaderboard %&gt;%\n        as_tibble() %&gt;%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n        slice(1:15) %&gt;% \n        rownames_to_column(var = \"rowname\") %&gt;%\n        # Visually this step will not change anything\n        # It reorders the factors under the hood\n        mutate(\n          model_id   = as_factor(model_id) %&gt;% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %&gt;% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %&gt;% \n        mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as_factor() %&gt;% fct_rev())\n\ndata_transformed_tbl %&gt;%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n        # Facet to break out logloss and auc\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n2 Cowplot (Challenge 5)\n\ntheme_new &lt;- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n)\n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         2 hours 35 minutes \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.1 \n#&gt;     H2O cluster version age:    3 months and 7 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Domin_adl455 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.88 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.2.3 (2023-03-15 ucrt)\n\nnewdata &lt;- test_data\norder_by &lt;- \"auc\"\nmax_models &lt;- 4\nsize &lt;- 1\n\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n        as_tibble() %&gt;%\n        slice(1:max_models)\n    \n    newdata_tbl &lt;- newdata %&gt;%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      &lt;- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr &lt;- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics &lt;- function(model_id, test_data) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_data))\n        \n        perf_h2o %&gt;%\n            h2o.metric() %&gt;%\n            as.tibble() %&gt;%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n          model_id = as_factor(model_id) %&gt;% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %&gt;% \n                      round(3) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %&gt;% \n                      round(4) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift &lt;- function(model_id, test_data) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_data)) \n        \n        perf_h2o %&gt;%\n            h2o.gainsLift() %&gt;%\n            as.tibble() %&gt;%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n            model_id = as_factor(model_id) %&gt;% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %&gt;% \n                round(3) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %&gt;% \n                round(4) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id))\n        ) %&gt;%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend &lt;- get_legend(p1)\n    # Remove legend from p1\n    p1 &lt;- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title &lt;- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle &lt;- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nautoml_models_h2o@leaderboard %&gt;%\n    plot_h2o_performance(newdata = test_data, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)\n\n#&gt; Warning: There was 1 warning in `mutate()`.\n#&gt; ℹ In argument: `metrics = map(model_id, get_model_performance_metrics,\n#&gt;   newdata_tbl)`.\n#&gt; Caused by warning:\n#&gt; ! `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead."
  },
  {
    "objectID": "content/01_journal/Challenge2.html",
    "href": "content/01_journal/Challenge2.html",
    "title": "Challenge 2",
    "section": "",
    "text": "# Standard\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\n\n#&gt; \n#&gt; Attache Paket: 'recipes'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:stringr':\n#&gt; \n#&gt;     fixed\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:stats':\n#&gt; \n#&gt;     step\n\nlibrary(rsample)\nlibrary(workflows)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n#&gt; \n#&gt; Attache Paket: 'yardstick'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:readr':\n#&gt; \n#&gt;     spec\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n#&gt; Lade nötiges Paket: rpart\n\nbike_orderlines &lt;- read_rds(\"bike_orderlines.rds\")\n#Prepare Data\ndata &lt;- bike_orderlines %&gt;% \n  #Select needed Columns\n  select(model, model_year, category_1, category_2, category_3, price, frame_material) %&gt;% \n  #Remove Duplicates and prepare rows\n  distinct() %&gt;% \n  na.omit() %&gt;% \n  mutate_if(is.character, as.factor)\n\nglimpse(data)\n\n#&gt; Rows: 230\n#&gt; Columns: 7\n#&gt; $ model          &lt;fct&gt; Spectral CF 7 WMN, Ultimate CF SLX Disc 8.0 ETAP, Neuro…\n#&gt; $ model_year     &lt;dbl&gt; 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#&gt; $ category_1     &lt;fct&gt; Mountain, Road, Mountain, Road, Mountain, Hybrid / City…\n#&gt; $ category_2     &lt;fct&gt; Trail, Race, Trail, Triathlon Bike, Dirt Jump, City, Tr…\n#&gt; $ category_3     &lt;fct&gt; Spectral, Ultimate, Neuron, Speedmax, Stitched, Roadlit…\n#&gt; $ price          &lt;dbl&gt; 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#&gt; $ frame_material &lt;fct&gt; carbon, carbon, carbon, carbon, aluminium, carbon, carb…\n\n#Split Data\nset.seed(123)\n\ndata_split &lt;- initial_split(data, prop = 3/4)\n\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)\n\n#Create recipe\nbikes_rec &lt;- recipe(price ~ ., data = train_data) %&gt;% \n  #Add roles\n  update_role(model, new_role = \"ID\") %&gt;% \n  #Add dummy variables\n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors())\n\n#Create Model\nlr_mod &lt;-\n  linear_reg() %&gt;% \n  set_engine(\"glm\") \n  \n#Create Workflow\nbikes_wflow &lt;- workflow() %&gt;% \n  add_model(lr_mod) %&gt;% \n  add_recipe(bikes_rec)\nbikes_wflow\n\n#&gt; ══ Workflow ════════════════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: linear_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; Linear Regression Model Specification (regression)\n#&gt; \n#&gt; Computational engine: glm\n\n#Fit Model\nbikes_fit &lt;- bikes_wflow %&gt;% \n  fit(data = train_data)\n\n#Predict\nbikes_pred &lt;- predict(bikes_fit, test_data) %&gt;% \n  bind_cols(test_data %&gt;% select(price, model))\n\n#&gt; Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#&gt; Vorhersage durch Fit ohne vollen Rang mag täuschen\n\nbikes_pred %&gt;% \n  metrics(truth = price, estimate = .pred)"
  },
  {
    "objectID": "content/01_journal/Challenge5.html",
    "href": "content/01_journal/Challenge5.html",
    "title": "Challenge 5",
    "section": "",
    "text": "For the leaderboard visualization and the cow plot see challenge 4.\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(h2o)\n\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; Your next step is to start H2O:\n#&gt;     &gt; h2o.init()\n#&gt; \n#&gt; For H2O package documentation, ask for help:\n#&gt;     &gt; ??h2o\n#&gt; \n#&gt; After starting H2O, you can use the Web UI at http://localhost:54321\n#&gt; For more information visit https://docs.h2o.ai\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'h2o'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:lubridate':\n#&gt; \n#&gt;     day, hour, month, week, year\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:stats':\n#&gt; \n#&gt;     cor, sd, var\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#&gt;     colnames&lt;-, ifelse, is.character, is.factor, is.numeric, log,\n#&gt;     log10, log1p, log2, round, signif, trunc\n\nlibrary(rsample)\nlibrary(recipes)\n\n#&gt; \n#&gt; Attache Paket: 'recipes'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:stringr':\n#&gt; \n#&gt;     fixed\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:stats':\n#&gt; \n#&gt;     step\n\n# Load Data\nproduct_backorders &lt;- read_csv(\"product_backorders.csv\")\n\n#&gt; Rows: 19053 Columns: 23\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#&gt; dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Split Data\nset.seed(123)\nsplit_obj &lt;- initial_split(product_backorders, prop = 0.85)\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl &lt;- testing(split_obj)\n\nproduct_rec &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  prep()\n\ntrain_data &lt;- bake(product_rec, new_data = train_readable_tbl)\ntest_data &lt;- bake(product_rec, new_data = test_readable_tbl)\n\nh2o.init()\n\n#&gt; \n#&gt; H2O is not running yet, starting it now...\n#&gt; \n#&gt; Note:  In case of errors look at the following log files:\n#&gt;     C:\\Users\\Domin\\AppData\\Local\\Temp\\RtmpaWzYvg\\file10c459f610f6/h2o_Domin_started_from_r.out\n#&gt;     C:\\Users\\Domin\\AppData\\Local\\Temp\\RtmpaWzYvg\\file10c4286369ab/h2o_Domin_started_from_r.err\n#&gt; \n#&gt; \n#&gt; Starting H2O JVM and connecting:  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         3 seconds 471 milliseconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.1 \n#&gt;     H2O cluster version age:    3 months and 7 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Domin_adl455 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.41 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.2.3 (2023-03-15 ucrt)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_data), ratios = c(0.85), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_data)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n#Load Models\nmodel1 &lt;- h2o.loadModel(\"./models/StackedEnsemble_AllModels_1_AutoML_5_20230515_170512\")\nmodel2 &lt;- h2o.loadModel(\"./models/StackedEnsemble_AllModels_2_AutoML_5_20230515_170512\")\nmodel3 &lt;- h2o.loadModel(\"./models/StackedEnsemble_BestOfFamily_3_AutoML_5_20230515_170512\")\n\n\n#Grid Search\nh2o.performance(model1, newdata = as.h2o(test_data))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; \n#&gt; MSE:  0.05024247\n#&gt; RMSE:  0.2241483\n#&gt; LogLoss:  0.1670338\n#&gt; Mean Per-Class Error:  0.14733\n#&gt; AUC:  0.9487011\n#&gt; AUCPR:  0.7256739\n#&gt; Gini:  0.8974021\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2389 159 0.062402  =159/2548\n#&gt; Yes      72 238 0.232258    =72/310\n#&gt; Totals 2461 397 0.080826  =231/2858\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.275779    0.673267 204\n#&gt; 2                       max f2  0.112598    0.759320 276\n#&gt; 3                 max f0point5  0.682088    0.719770  83\n#&gt; 4                 max accuracy  0.682088    0.932470  83\n#&gt; 5                max precision  0.984244    1.000000   0\n#&gt; 6                   max recall  0.006402    1.000000 381\n#&gt; 7              max specificity  0.984244    1.000000   0\n#&gt; 8             max absolute_mcc  0.275779    0.634203 204\n#&gt; 9   max min_per_class_accuracy  0.122757    0.883871 271\n#&gt; 10 max mean_per_class_accuracy  0.085867    0.888402 291\n#&gt; 11                     max tns  0.984244 2548.000000   0\n#&gt; 12                     max fns  0.984244  309.000000   0\n#&gt; 13                     max fps  0.000110 2548.000000 399\n#&gt; 14                     max tps  0.006402  310.000000 381\n#&gt; 15                     max tnr  0.984244    1.000000   0\n#&gt; 16                     max fnr  0.984244    0.996774   0\n#&gt; 17                     max fpr  0.000110    1.000000 399\n#&gt; 18                     max tpr  0.006402    1.000000 381\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\ndeeplearning_grid_01 &lt;- h2o.grid(\n  algorithm = \"deeplearning\",\n  grid_id = \"deeplearning_grid_01\",\n  x = x,\n  y = y,\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  hyper_params = list(\n    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n    epochs = c(10, 50, 100)\n  )\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ndeeplearning_grid_01_model_1 &lt;- h2o.getModel(\"deeplearning_grid_01_model_1\")\ndeeplearning_grid_01_model_1 %&gt;% h2o.auc(train = T, valid = T, xval = T)\n\n#&gt;     train     valid      xval \n#&gt; 0.7946087 0.8181086 0.7716700\n\ndeeplearning_grid_01_model_1 %&gt;%\n  h2o.performance(newdata = as.h2o(test_data))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; \n#&gt; MSE:  0.08439949\n#&gt; RMSE:  0.2905159\n#&gt; LogLoss:  0.2888497\n#&gt; Mean Per-Class Error:  0.3310098\n#&gt; AUC:  0.7899535\n#&gt; AUCPR:  0.3611289\n#&gt; Gini:  0.5799071\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2316 232 0.091052  =232/2548\n#&gt; Yes     177 133 0.570968   =177/310\n#&gt; Totals 2493 365 0.143107  =409/2858\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.161665    0.394074 155\n#&gt; 2                       max f2  0.127742    0.506053 208\n#&gt; 3                 max f0point5  0.216930    0.457516 105\n#&gt; 4                 max accuracy  0.218462    0.897481 104\n#&gt; 5                max precision  0.992217    1.000000   0\n#&gt; 6                   max recall  0.016464    1.000000 370\n#&gt; 7              max specificity  0.992217    1.000000   0\n#&gt; 8             max absolute_mcc  0.211135    0.339970 111\n#&gt; 9   max min_per_class_accuracy  0.118667    0.710754 223\n#&gt; 10 max mean_per_class_accuracy  0.127742    0.716218 208\n#&gt; 11                     max tns  0.992217 2548.000000   0\n#&gt; 12                     max fns  0.992217  309.000000   0\n#&gt; 13                     max fps  0.000044 2548.000000 399\n#&gt; 14                     max tps  0.016464  310.000000 370\n#&gt; 15                     max tnr  0.992217    1.000000   0\n#&gt; 16                     max fnr  0.992217    0.996774   0\n#&gt; 17                     max fpr  0.000044    1.000000 399\n#&gt; 18                     max tpr  0.016464    1.000000 370\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\n#Theme\ntheme_new &lt;- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n) \n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n#Optimal Threshold\nperformance_h2o &lt;- h2o.performance(model1, newdata = as.h2o(test_data))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nperformance_tbl &lt;- performance_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as_tibble() \n\nperformance_tbl %&gt;%\n  filter(f1 == max(f1))\n\n\n\n  \n\n\nperformance_tbl %&gt;%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n#ROC Plot\npath &lt;- \"models/StackedEnsemble_AllModels_1_AutoML_5_20230515_170512\"\nload_model_performance_metrics &lt;- function(path, test_data) {\n  path\n  model_h2o &lt;- h2o.loadModel(path)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_data)) \n  \n  perf_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() %&gt;%\n    mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n    select(tpr, fpr, auc, recall, precision)\n  \n}\n\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"models/\") %&gt;%\n  select(path) %&gt;%\n  mutate(metrics = map(path, load_model_performance_metrics, test_data)) %&gt;%\n  unnest(cols = metrics)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %&gt;%\n    # Extract the model names\n    mutate(\n      # Extract the model names\n      path = str_split(path, pattern = \"/\", simplify = T)[,2] %&gt;% as_factor(),\n      auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n    ) %&gt;%\n  ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\n\n\n\n\n#Precision Vs Recall Plot\nmodel_metrics_tbl %&gt;%\n  mutate(\n    path = str_split(path, pattern = \"/\", simplify = T)[,2] %&gt;% as_factor(),\n    auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(recall, precision, color = path, linetype = auc)) +\n  geom_line() +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\n\n\n\n\n# Gain Chart\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n  h2o.gainsLift() %&gt;%\n  as.tibble()\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"lift\")) %&gt;%\n  mutate(baseline = cumulative_data_fraction) %&gt;%\n  rename(gain     = cumulative_capture_rate) %&gt;%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\n\n\n\n\n\n\n\n## Lift Plot\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"capture\")) %&gt;%\n  mutate(baseline = 1) %&gt;%\n  rename(lift = cumulative_lift) %&gt;%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new"
  },
  {
    "objectID": "content/01_journal/Challenge6.html",
    "href": "content/01_journal/Challenge6.html",
    "title": "Challenge 6",
    "section": "",
    "text": "library(h2o)\n\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; Your next step is to start H2O:\n#&gt;     &gt; h2o.init()\n#&gt; \n#&gt; For H2O package documentation, ask for help:\n#&gt;     &gt; ??h2o\n#&gt; \n#&gt; After starting H2O, you can use the Web UI at http://localhost:54321\n#&gt; For more information visit https://docs.h2o.ai\n#&gt; \n#&gt; ----------------------------------------------------------------------\n\n\n#&gt; \n#&gt; Attache Paket: 'h2o'\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:stats':\n#&gt; \n#&gt;     cor, sd, var\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#&gt;     colnames&lt;-, ifelse, is.character, is.factor, is.numeric, log,\n#&gt;     log10, log1p, log2, round, signif, trunc\n\nlibrary(recipes)\n\n#&gt; Lade nötiges Paket: dplyr\n\n\n#&gt; \n#&gt; Attache Paket: 'dplyr'\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:stats':\n#&gt; \n#&gt;     filter, lag\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\n\n\n#&gt; \n#&gt; Attache Paket: 'recipes'\n\n\n#&gt; Das folgende Objekt ist maskiert 'package:stats':\n#&gt; \n#&gt;     step\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ forcats   1.0.0     ✔ readr     2.1.4\n#&gt; ✔ ggplot2   3.4.2     ✔ stringr   1.5.0\n#&gt; ✔ lubridate 1.9.2     ✔ tibble    3.2.1\n#&gt; ✔ purrr     1.0.1     ✔ tidyr     1.3.0\n\n\n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ lubridate::day()   masks h2o::day()\n#&gt; ✖ dplyr::filter()    masks stats::filter()\n#&gt; ✖ stringr::fixed()   masks recipes::fixed()\n#&gt; ✖ lubridate::hour()  masks h2o::hour()\n#&gt; ✖ dplyr::lag()       masks stats::lag()\n#&gt; ✖ lubridate::month() masks h2o::month()\n#&gt; ✖ lubridate::week()  masks h2o::week()\n#&gt; ✖ lubridate::year()  masks h2o::year()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#&gt; Lade nötiges Paket: PerformanceAnalytics\n#&gt; Lade nötiges Paket: xts\n#&gt; Lade nötiges Paket: zoo\n#&gt; \n#&gt; Attache Paket: 'zoo'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     as.Date, as.Date.numeric\n#&gt; \n#&gt; \n#&gt; ######################### Warning from 'xts' package ##########################\n#&gt; #                                                                             #\n#&gt; # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#&gt; # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#&gt; # source() into this session won't work correctly.                            #\n#&gt; #                                                                             #\n#&gt; # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#&gt; # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#&gt; # dplyr from breaking base R's lag() function.                                #\n#&gt; #                                                                             #\n#&gt; # Code in packages is not affected. It's protected by R's namespace mechanism #\n#&gt; # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#&gt; #                                                                             #\n#&gt; ###############################################################################\n#&gt; \n#&gt; Attache Paket: 'xts'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:dplyr':\n#&gt; \n#&gt;     first, last\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'PerformanceAnalytics'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:graphics':\n#&gt; \n#&gt;     legend\n#&gt; \n#&gt; Lade nötiges Paket: quantmod\n#&gt; Lade nötiges Paket: TTR\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\nlibrary(lime)\n\n#&gt; \n#&gt; Attache Paket: 'lime'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:dplyr':\n#&gt; \n#&gt;     explain\n\nlibrary(rsample)\n\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    &lt;- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\n# Processing Pipeline\nprocess_hr_data_readable &lt;- function(data, definitions_tbl) {\n  \n  definitions_list &lt;- definitions_tbl %&gt;%\n    fill(...1, .direction = \"down\") %&gt;%\n    filter(!is.na(...2)) %&gt;%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %&gt;%\n    rename(column_name = ...1) %&gt;%\n    mutate(key = as.numeric(key)) %&gt;%\n    mutate(value = value %&gt;% str_replace(pattern = \"'\", replacement = \"\")) %&gt;%\n    split(.$column_name) %&gt;%\n    map(~ select(., -column_name)) %&gt;%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name &lt;- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) &lt;- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl &lt;- list(HR_Data = data) %&gt;%\n    append(definitions_list, after = 1) %&gt;%\n    reduce(left_join) %&gt;%\n    select(-one_of(names(definitions_list))) %&gt;%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %&gt;%\n    select(sort(names(.))) %&gt;%\n    mutate_if(is.character, as.factor) %&gt;%\n    mutate(\n      BusinessTravel = BusinessTravel %&gt;% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %&gt;% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#&gt; Joining with `by = join_by(Education)`\n#&gt; Joining with `by = join_by(EnvironmentSatisfaction)`\n#&gt; Joining with `by = join_by(JobInvolvement)`\n#&gt; Joining with `by = join_by(JobSatisfaction)`\n#&gt; Joining with `by = join_by(PerformanceRating)`\n#&gt; Joining with `by = join_by(RelationshipSatisfaction)`\n#&gt; Joining with `by = join_by(WorkLifeBalance)`\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n  prep()\n\nrecipe_obj\n\n#&gt; \n#&gt; ── Recipe ──────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; ── Inputs \n#&gt; Number of variables by role\n#&gt; outcome:    1\n#&gt; predictor: 34\n#&gt; \n#&gt; ── Training information \n#&gt; Training data contained 1249 data points and no incomplete rows.\n#&gt; \n#&gt; ── Operations \n#&gt; • Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n#&gt; • Variable mutation for: JobLevel, StockOptionLevel | Trained\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 2. Models ----\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 hours 8 minutes \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.1 \n#&gt;     H2O cluster version age:    3 months and 7 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Domin_adl455 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.99 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.2.3 (2023-03-15 ucrt)\n\nautoml_leader &lt;- h2o.loadModel(\"models/StackedEnsemble_AllModels_2_AutoML_1_20230515_213823\")\n\npredictions_tbl &lt;- automl_leader %&gt;% \n  h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n  as.tibble() %&gt;%\n  bind_cols(\n    test_tbl %&gt;%\n      select(Attrition, EmployeeNumber)\n  )\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %&gt;%\n  as.tibble() \n\n\n\n  \n\n\ncase_1 &lt;- explanation %&gt;%\n  filter(case == 1)\n\ncase_1 %&gt;% \n  ggplot(aes(feature_weight,feature_desc, fill = feature_weight &gt; 0)) + \n  geom_col() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nexplanations &lt;- test_tbl %&gt;%\n  slice(1:20) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 0.5\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanations %&gt;%\n  as.tibble() %&gt;% \n  ggplot(aes(case, feature_desc, fill = feature_weight)) + \n  geom_tile() +\n  facet_wrap(vars(label))"
  }
]